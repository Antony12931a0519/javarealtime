java at least jdk 8(1.8)
eclipse oxygen or any latest version
any database

differt layers inthe application.

library manageent system

default package(com.lms.app)-LMSApplication.java
contoller(com.lms.controller)--contains all the services/endpoints
friendsController
groupController
service(com.lms.service)/manager(com.lms.manager)--contains business logic
dao/dal(com.lms.dal/dao)--database related logic(C(create)U(update)R(Read)D(Delete) opearions)
util(com.lms.util)
models(com.lms.models)pojo classs--plain old java object
entities(com.lms.entities)--100 tables ---100 entities
@X--annotations


www.facebook.com/friends
[
{
"friendaid":"fdefwe",
"name":"ewefwee"
},
{
"friendaid":"fdefwe",
"name":"ewefwee"
},
{
"friendaid":"fdefwe",
"name":"ewefwee"
}

]


public class Friend{

private int friendId;
private String name;

getter();
setter();



}

www.facebook.com/friends
www.facebook.com/friends/friendid
{
"friendaid":"fdefwe",
"name":"ewefwee"
}

controller----->service layer---->dao/dal layer----->entities----->models----databases
controller<-----service layer<----dao/dal layer<-----entities<-----models----databases

frameworks(restfull web services/spring boot/spring/hibernate/jpa)

databases--h2 

maven--build tool
pom.xml

<dependencies>
<dependency>

<dependency>
<dependencies>

application server
tomcat/weblogic/apache 2


FreindsController(creae the end point here)++add the nedw point here
FreindsService
FreindsEnity
FriendsModel
FriendsDAO


https://start.spring.io/

Group
com.realtimejava
Artifact
facebook
Name
demo
Description
Demo project for Spring Boot
Package name

ctrl + shft + r -  for searching the class in the entire project


spring boot project

parent project
child project

ctrl + shft + o -- for importing the packges

ctrl + sft + / --for commenting the code


maven
maven clean--existing . class files will be removed
maven install--to recompile th code and geneate the .class files
maven update--when everwe changes the resources


.java file---compile---.class file----java run

annotations
-----------
@SpringBootApplication--automatic configuration

@RestController

localhost:8080/welcome
http://localhost:8080/welcome/groups
http://localhost:8080/welcome/friends

core java--

collections frameworks

Interfaces      Implementation Classes
List             ArrayList,Stack,Vector,LikedList
Set               Hashset,LikedHashSet,TreeSet
Map              HashMap,LikedHashMap,TreeMap

interfaces:

same as classs but we cant create object


public interface Demo{

public void add();

}

public void add(){
}

public void add();

Arrays

int[] numbers={1,2,3,4,56};

for(int i=0;i<numbers.length-1;i++){

}

List ref = new ArrayList<>();
Set ref = new HashSet<>();
Map<K,V> ref = new HashMap<K,V>();


https://github.com/Antony12931a0519/javarealtime.git


controller---->service/manager---->dao-->entities----database

code in .project file:
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>friendbook</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.wst.jsdt.core.javascriptValidator</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.wst.common.project.facet.core.builder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.wst.validation.validationbuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.m2e.core.maven2Builder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>
		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>
		<nature>org.eclipse.jdt.core.javanature</nature>
		<nature>org.eclipse.m2e.core.maven2Nature</nature>
		<nature>org.eclipse.wst.common.project.facet.core.nature</nature>
		<nature>org.eclipse.wst.jsdt.core.jsNature</nature>
	</natures>
</projectDescription>

code in .classpath:
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" output="target/classes" path="src/main/java">
		<attributes>
			<attribute name="optional" value="true"/>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
		<attributes>
			<attribute name="optional" value="true"/>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="output" path="target/classes"/>
</classpath>

stable parent pom:
<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.3.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>


{
name
address
groupname

}

query params

localhost:8080/friendbook/friends/101
localhost:8080/friendbook/friends?friendId=101&name="uyguhfq"

list of friends

firnds/group/groupid

select
        friends0_.id as id1_0_,
        friends0_.address as address2_0_,
        friends0_.group_id as group_id3_0_,
        friends0_.name as name4_0_ 
    from
        friends friends0_ 
    where
        friends0_.group_id=?
        
        Restfull web services
        ---------------------
        soap web services--xml format
        rest services--json
        spring boot
        
        @PUT
        @POST
        @GET
        @DELETE
        
        --------------------------------
        @Path("value")
        @GET
        @Request(application/json)
        @Response(application/json)        
        public String test(){
        return "Welcoe!";
        }
deps for junit test cases
<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>2.15.0</version>

		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-inline</artifactId>
			<version>2.15.0</version>
		</dependency>
		
		
		CurdRepository-Parent--only CURD operation--c r d u
		
		PaginationRepository-Parent--
		
		JPARepository Child---flush--
		
		jdbc--java data base conectivity
		
		spring boot--crudrepo
		jpa
		pagination
		spring data jpa 
		jdbc emplte
		Springjd
		
		soap web services--xml
		rest full wen services
		spring boot
		web fliex
		
		---------------------
		jdbc
		jdbc
		jdbc template
		mybatis/ibatis--mybatis generator
		hibernate--jpa
		spring jdbc emplate
		
		inheritance---parent--child
		@Override
	public void insertEmployee(Employee emp) {
		String sql = "INSERT INTO employee " +
				"(empId, empName) VALUES (?, ?)" ;//query parameteres
		getJdbcTemplate().update(sql, new Object[]{
				emp.getEmpId(), emp.getEmpName()
		});
	}
		jdbc:
		statements
		prepared statents
		
		jdbc
		----
		establishment of driver--h2/mysql/orcale
		creaion of connection/url/pass/user
		statment createion///query create
		statement exceution///excecution if query
		get resultset//
		
		try{
      //STEP 2: Register JDBC driver
      Class.forName("com.mysql.jdbc.Driver");

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println("Creating statement...");
      stmt = conn.createStatement();
      String sql;
      sql = "SELECT id, first, last, age FROM Employees";
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         int id  = rs.getInt("id");
         int age = rs.getInt("age");
         String first = rs.getString("first");
         String last = rs.getString("last");

         //Display values
         System.out.print("ID: " + id);
         System.out.print(", Age: " + age);
         System.out.print(", First: " + first);
         System.out.println(", Last: " + last);
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close()
      
      friends
      id name add city mobile
      
      select * from table table where column='value';
      select * from friends where city = 'hyd';
      select * from friends f where f.city='hyd';
      
       select f from friends f where f.city='hyd';
       
        select f.name,f.add,f.city from friends f where f.city='hyd';
        
        interfaces:
        ----------
        sames as classes
        
        public class demo{
        
        can conain both abstract methods and concrete methods.
        }
        
        concrete methds-methods with implementation--normal method
        public void showWelcomeMessage(){
        Sysout("Hello");
        }
        abstract method--method without implementation
        public void showWelcomeMessage();
       
        constructor--will not have return type
		
		demo ref = new demo();--for initlizationof the varibles if presentin the class at the time eof object creation.

public interface Animal{

public String sounds();
public int numberOfLegs();
}

XXXXX---Animal ref = new Animal();
creation of helper classes for the interfaces.

public abstract  class Dog implements Animal{
public String sounds();
public int numberOfLegs(){
}

}

public class Puppy extends Dog{

}
------
public   class Dog implements Animal{
public String makeSounds(){
return "bow bow"
}
public int getNumberOfLegs(){
}

}

public   class Cow implements Animal{
public String makeSounds(){
return "anandsa sajada"
}
public int getNumberOfLegs(){
}

}

------

RBIBank
--bank name
--minbalance

public interfae RBIBank{
public String bankName();
public double minBalance();
public Sting accoutFormact();
}
-----------------
10--Banks
icici,sbi,hdfc........

numbers of methods in interface ==numbers of methodsin the implementation class with implementation


public class SBI implements RBIBank{
public String bankName(){

}
public double minBalance(){
}
}

public class ICICI implements RBIBank{
public String bankName(){

}
public double minBalance(){
}
}


java 8--interface can have methods with implementation

public interfae RBIBank{
public String bankName();
public double minBalance();
public default Sting accoutFormact(){
}
}


public class SBI implements RBIBank{
public String bankName(){

}
public double minBalance(){
}
}

public class ICICI implements RBIBank{
public String bankName(){

}
public double minBalance(){
}
}

-----------------------
intrfces

















